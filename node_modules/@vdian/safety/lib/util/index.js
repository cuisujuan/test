import { isString, merge, debounce, toArray, isEmpty } from '@vdian/util';
import { A, FROM_CHAR_CODE, DOCUMENT, GLOBAL, READY_STATE_REGEXP } from '../constants';
/**
 * @ignore
 */
export function createLink(url) {
    A.href = url;
    return A;
}
/**
 * @ignore
 */
export function domContentLoaded(callback) {
    if (READY_STATE_REGEXP.test(DOCUMENT.readyState) && DOCUMENT.body) {
        callback();
        return;
    }
    GLOBAL.addEventListener('DOMContentLoaded', callback);
}
/**
 * HTML Decode 处理，防止出现10进制或者16进制
 * @param input 字符串
 * @returns 处理后的字符串
 * @ignore
 */
export function htmlDecode(input) {
    return input
        .replace(/&#x([\dabcdef]+);?/gi, function (_e, t) {
        return FROM_CHAR_CODE(parseInt(t, 16));
    })
        .replace(/&#(\d+);?/g, function (_e, t) {
        return FROM_CHAR_CODE(parseInt(t, 10));
    });
}
/**
 * @ignore
 */
export function removeChild(node) {
    if (node.parentNode) {
        node.parentNode.removeChild(node);
    }
}
var options = {};
/**
 * @ignore
 */
export function access(opts) {
    if (isString(opts)) {
        return options[opts];
    }
    merge(options, opts);
}
/**
 * @ignore
 */
export { debounce, toArray, isEmpty };
