import { isLegalUrl } from '../url-legalize';
import { PARAM_SOURCE_NAMES, NODE_CACHE_KEY } from '../constants';
import { removeChild } from '../util';
function getUrl(node) {
    var nodeName = node.nodeName;
    switch (nodeName) {
        case 'AUDIO':
        case 'VIDEO':
            // currentSrc: 表示当前正在播放的媒体文件的绝对路径
            // src: 表示媒体文件的 URL
            return node.src || node.currentSrc;
        case 'OBJECT':
            return node.data;
        case 'A':
            return node.href;
        case 'PARAM':
            if (PARAM_SOURCE_NAMES.indexOf(node.name) !== -1) {
                return node.value;
            }
    }
    return node.src;
}
function isCached(node, url) {
    return node[NODE_CACHE_KEY] && node[NODE_CACHE_KEY][url];
}
// 缓存当前链接操作状态
function cache(node, url) {
    node[NODE_CACHE_KEY] = node[NODE_CACHE_KEY] || {};
    node[NODE_CACHE_KEY][url] = true;
}
function remove(node) {
    var url = getUrl(node);
    if (!url || isCached(node, url)) {
        return;
    }
    if (!isLegalUrl(url)) {
        removeChild(node);
        return;
    }
    // mark it if node is not deleted
    cache(node, url);
}
// 延迟处理的节点
/**
 * @ignore
 */
export var DELAYED_HANDLERS = {
    A: remove,
    IMG: remove,
    IFRAME: remove,
    AUDIO: remove,
    VIDEO: remove,
    EMBED: remove,
    OBJECT: remove,
    PARAM: remove,
    SOURCE: remove
};
/**
 * @ignore
 */
export var DELAYED_NODE_NAMES = Object.keys(DELAYED_HANDLERS).join(',');
// 立即执行的节点
/**
 * @ignore
 */
export var IMMEDIATELY_HANDLERS = {
    SCRIPT: remove
};
/**
 * @ignore
 */
export var IMMEDIATELY_NODE_NAMES = Object.keys(IMMEDIATELY_HANDLERS).join(',');
