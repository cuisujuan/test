"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.disconnect = exports.observe = void 0;
var util_1 = require("../util");
var constants_1 = require("../constants");
var nodes_1 = require("./nodes");
// tslint:disable-next-line
var MutationObserver = constants_1.GLOBAL.MutationObserver || constants_1.GLOBAL.WebKitMutationObserver;
function getNodesByRecords(records) {
    var nodes = [];
    records.forEach(function (record) {
        var addedNodes = util_1.toArray(record.addedNodes);
        nodes = nodes.concat(addedNodes);
    });
    return nodes;
}
function immediatelyHandler(records) {
    var nodes = getNodesByRecords(records);
    nodes.forEach(function (node) {
        var nodeName = node.nodeName;
        if (nodes_1.IMMEDIATELY_NODE_NAMES.indexOf(nodeName) !== -1) {
            // document.createElement('script')插入的脚本无法阻止执行，其余方式引入的脚本可阻止执行，但无法阻止脚本文件请求
            // script节点已添加，请求已发送
            nodes_1.IMMEDIATELY_HANDLERS[nodeName](node);
        }
    });
}
// 动态插入的节点，addedNodes为插入的节点，无法获取到子节点，需循环遍历
// 触发mutationCallback时，节点都已添加，请求已发送，所以只能阻止显示，故可合并多次节点改变延时执行
var delayedHandler = util_1.debounce(function () {
    var nodes = constants_1.DOCUMENT.querySelectorAll(nodes_1.DELAYED_NODE_NAMES);
    nodes.forEach(function (node) {
        nodes_1.DELAYED_HANDLERS[node.nodeName](node);
    });
});
function mutationCallback(records) {
    immediatelyHandler(records);
    delayedHandler();
}
var observer;
/**
 * @ignore
 */
function observe() {
    if (MutationObserver && !observer) {
        observer = new MutationObserver(mutationCallback);
        observer.observe(constants_1.DOCUMENT, {
            childList: true,
            attributes: true,
            subtree: true,
            attributeFilter: ['href', 'src']
        });
    }
}
exports.observe = observe;
/**
 * @ignore
 */
function disconnect() {
    if (observer) {
        // 由于delayedHandler存在延迟，disconnect后可能会移除不合法节点
        observer.disconnect();
        observer = undefined;
    }
}
exports.disconnect = disconnect;
