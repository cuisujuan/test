"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IMMEDIATELY_NODE_NAMES = exports.IMMEDIATELY_HANDLERS = exports.DELAYED_NODE_NAMES = exports.DELAYED_HANDLERS = void 0;
var url_legalize_1 = require("../url-legalize");
var constants_1 = require("../constants");
var util_1 = require("../util");
function getUrl(node) {
    var nodeName = node.nodeName;
    switch (nodeName) {
        case 'AUDIO':
        case 'VIDEO':
            // currentSrc: 表示当前正在播放的媒体文件的绝对路径
            // src: 表示媒体文件的 URL
            return node.src || node.currentSrc;
        case 'OBJECT':
            return node.data;
        case 'A':
            return node.href;
        case 'PARAM':
            if (constants_1.PARAM_SOURCE_NAMES.indexOf(node.name) !== -1) {
                return node.value;
            }
    }
    return node.src;
}
function isCached(node, url) {
    return node[constants_1.NODE_CACHE_KEY] && node[constants_1.NODE_CACHE_KEY][url];
}
// 缓存当前链接操作状态
function cache(node, url) {
    node[constants_1.NODE_CACHE_KEY] = node[constants_1.NODE_CACHE_KEY] || {};
    node[constants_1.NODE_CACHE_KEY][url] = true;
}
function remove(node) {
    var url = getUrl(node);
    if (!url || isCached(node, url)) {
        return;
    }
    if (!url_legalize_1.isLegalUrl(url)) {
        util_1.removeChild(node);
        return;
    }
    // mark it if node is not deleted
    cache(node, url);
}
// 延迟处理的节点
/**
 * @ignore
 */
exports.DELAYED_HANDLERS = {
    A: remove,
    IMG: remove,
    IFRAME: remove,
    AUDIO: remove,
    VIDEO: remove,
    EMBED: remove,
    OBJECT: remove,
    PARAM: remove,
    SOURCE: remove
};
/**
 * @ignore
 */
exports.DELAYED_NODE_NAMES = Object.keys(exports.DELAYED_HANDLERS).join(',');
// 立即执行的节点
/**
 * @ignore
 */
exports.IMMEDIATELY_HANDLERS = {
    SCRIPT: remove
};
/**
 * @ignore
 */
exports.IMMEDIATELY_NODE_NAMES = Object.keys(exports.IMMEDIATELY_HANDLERS).join(',');
