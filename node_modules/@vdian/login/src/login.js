!(function () {
    var _window = window,
        _document = document;
    // 计数器初始化为0
    var count = 0;
    // 登录cookie字段
    var IS_LOGIN = "is_login",
        WD_B_ID = "uid",
        WD_S_ID = "sid",
        LOGIN_USER_SOURCE = "login_source",
        LoGIN_TYPE = "login_type";
    // 错误码
    var CODE_SUCCESS = 0,
        CODE_FAILED = 2;
    // 接口返回信息
    var MSG_OK = "OK",
        MSG_LOGIN_ERROR = "LOGIN ERROR";

    var TYPE_NORMAL = 0,
        TYPE_LOGIN = 1,
        TYPE_LOGOFF = 2;

    /**
          ## `environment`变量说明

                0 : 开发
                1 : 测试、日常
                2 : 预发
                3 : 线上
    */
    var ENV_MAP = {
        DEV: 0,
        DAILY: 1,
        PRE: 2,
        PROD: 3
    }

    function getHostObject(env) {
        var bk = (env === ENV_MAP.DEV || env === ENV_MAP.DAILY) ? "-daily.test" : (env === ENV_MAP.PRE ? "-pre.test" : "");
        var lp = (env === ENV_MAP.DEV || env === ENV_MAP.DAILY) ? ".daily" : (env === ENV_MAP.PRE ? ".pre" : "");
        var sso = (env === ENV_MAP.DEV || env === ENV_MAP.DAILY) ? "wd.daily" : (env === ENV_MAP.PRE ? "wd.pre" : "sso");
        return {
            backendHost: "https://sso" + bk + ".weidian.com",
            loginPageHost: "https://h5" + lp + ".weidian.com",
            ssoPageHost: "https://" + sso + ".weidian.com", //新增北京ssohost
            thorHost: "https://thor" + lp + ".weidian.com"
        }
    }

    function getEnvironmentByUrl() {
        var hostname = _window.location.hostname,
            currentItem;
        // currentItem = (currentItem = hostname.match(/(?:.)dev|daily|pre(?:.)/)) ? currentItem[0] : null;
        currentItem = (currentItem = hostname.match(/(?=.)\bdev\b|\bdaily\b|\bpre\b(?=.)/)) ? currentItem[0] : null;
        // hostArray = hostname.split("."),
        //### ES5的 array.filter方法IE7,8不兼容,故果断抛弃
        // currentItem = hostArray.filter(function(item) {
        //     return /dev|daily|pre/.test(item);
        // })[0];
        switch (currentItem) {
            case "dev":
                return ENV_MAP.DEV;
            case "daily":
                return ENV_MAP.DAILY;
            case "pre":
                return ENV_MAP.PRE;
            default:
                return ENV_MAP.PROD;
        }
    }

    function getHost(environment) {
        var _env = environment === undefined ? getEnvironmentByUrl() : Number(environment);

        return getHostObject(_env);
    }

    function getHref() {
        return _window.location.href;
    }

    function getUA() {
        return _window.navigator.userAgent;
    }

    function get2ndLevelDomain(hostname) {
        return hostname
          .split(".")
          .slice(-2)
          .join(".");
    }

    function isMobile(type) {
        // 如果不传，默认为h5
        return (type === undefined) ? true : type;
    }

    function isWDHost(targetHost) {
        targetHost = targetHost || location.hostname;
        var writeList = ["koudai.com", "91ruyu.com", "bibikan.cn", "fangxin.com", "xihuan.com.cn", "youshop01.com", "youshop02.com", "youshop03.com", "youshop04.com", "youshop05.com", "youshop06.com", "youshop07.com", "youshop08.com", "youshop09.com", "youshop10.com", "kou6ai.cn", "ynet.com", "mitao.cn"];
        var isWDHost = false;
        writeList.forEach(function(domain) {
          if (!isWDHost && targetHost.indexOf(domain) > -1) {
            isWDHost = domain;
          }
        });
        return isWDHost;
    }

    function getTargetUrl(url, type) {
        // return url || getHref();
        var url = url || getHref();
        var host, redirectApi, domain;
        switch(type){
            case TYPE_LOGIN:
              if(isWDHost() && !isBuyerApp()){ //买家版中多域名情况login不需要调用synclogin接口
                host = getHost(),
                redirectApi = host.backendHost + '/user/synclogin',
                // domain = get2ndLevelDomain(location.hostname);
                domain = isWDHost();

                url =  redirectApi + "?type=" + domain + "&redirect=" + encodeURIComponent(url);
              }
              break;
            case TYPE_LOGOFF:

            // 多域名退出登录改造
            // http://wf.vdian.net/browse/WEB-3369

            if(isWDHost()){
                host = getHost(),
                    redirectApi = host.backendHost + '/user/synclogout',
                    domain = get2ndLevelDomain(location.hostname);
                url =  redirectApi +
                    "?type=" +
                    domain +
                    "&redirect=" +
                    encodeURIComponent(url);
            }

            break;
        }

        //登录&绑定操作 买家版 安卓 < 5.5.2.1版本 需要对url encode两次
        if(type !== TYPE_LOGOFF && isAndroid() && isBuyerApp() && versionCompare(getAppVersion(),'5.5.2.1') < 0){
            url = encodeURIComponent(url)
        }

        return url;
    }

    function getCookie(key) {
        var result;
        return (result = new RegExp('(?:^|; )' + key + '=([^;]*)').exec(_document.cookie)) ? result[1] : null;
    }

    // 格式化参数对象
    function formatParams(data) {
        var arry = [];
        for (var name in data) {
            if (typeof data[name] == "object") {
                arry.push(name + '=' + JSON.stringify(data[name]));
            }else{
                arry.push(encodeURIComponent(name) + '=' + encodeURIComponent(data[name]));
            }

        }
        return arry.join("&");
    }

    function vap() {
        return {
            status: {
                code: "",
                message: "",
                description: ""
            },
            result: {}
        };
    }

    function callback(data, success, error) {
        // 模拟统一的vap接口格式
        var infoResult = vap();

        if (data && data.status) {
            var status = data.status,
                code = status.status_code,
                message = status.message;

            var tempCode, tempMsg;
            switch (code) {
                case 0:
                    // 请求成功
                    tempCode = CODE_SUCCESS;
                    tempMsg = MSG_OK;
                    break;
                case 420010:
                    // token校验失败
                    tempCode = CODE_FAILED;
                    tempMsg = MSG_LOGIN_ERROR;
                    break;
                default:
                    // 其他类型错误
                    tempCode = code;
                    tempMsg = message;
            }
            infoResult.status.code = tempCode;
            infoResult.status.message = tempMsg;
            infoResult.result = data.result;

            code === CODE_SUCCESS ? (success && success(infoResult)) : (error && error(infoResult));
        } else {
            error && error(new Error("interface isn't legal"));
        }
    }

    function checkParam(param) {
        return typeof param !== "undefined" ? true : false;
    }

    function getCompleteLink(domain, url, params) {
        var link = "";
        link = domain + url;
        if (checkParam(params)) {
            link += "?" + formatParams(params);
        }
        return link;
    }

    function jsonp(options) {
        var options = options || {},
            data = options.data || {},
            jsonp = options.jsonp || "callback",
            success = options.success,
            error = options.error,
            url = options.url,
            responseData;

        if (!url) {
            return error && error(new Error("url is not defined!"));
        }

        // 动态创建script标签并添加到页面中
        var callbackName = "jsonp_" + count++,
            head = document.getElementsByTagName("head")[0],
            _script = document.createElement("script");
        // 将随机生成的回调函数存储在对象中
        data[jsonp] = callbackName;

        var onLoadCallback = (function () {
            // 用handled标志位来防止“onreadystatechange”与“onload”两个监听事件重复调用本函数
            var handled = false;
            return function () {
                if (handled) {
                    return;
                }
                handled = true;
                // 处理回调接口
                if (!responseData) {
                    error && error(new Error("callback function error!"));
                } else {
                    success && success(responseData);
                }
            };
        }());
        // 兼容部分IE 不支持onload事件的处理
        // http://stackoverflow.com/questions/6806584/object-onload-in-internet-explorer-6-7-and-8
        _script.onreadystatechange = function () {
            if (this.readyState === "complete" || this.readyState === "loaded") {
                onLoadCallback();
            }
        }
        // 监听script的src属性请求的资源是否已经加载完成
        _script.onload = onLoadCallback;
        // 加载失败
        _script.onerror = function (e) {
            head.removeChild(_script);
            window[callbackName] = null;
            error && error(e);
        }

        // 封装jsonp回调函数
        window[callbackName] = function (json) {
            head.removeChild(_script);
            window[callbackName] = null;
            // 缓存请求返回的json数据
            responseData = json;
        }

        // 发送请求
        _script.src = url + (url.indexOf("?") == -1 ? '?' : '&') + formatParams(data);
        head.appendChild(_script);
    }
    // 校验用户是否登录
    function isLogin() {
        return (getCookie(IS_LOGIN) || getCookie(WD_B_ID) || getCookie(WD_S_ID)) ? true : false;
    }
    // 校验是否纯卖家方式登录
    function isSellerLogin() {
        return isLogin() && getCookie(WD_S_ID) ? true : false;
    }
    // 校验是否通过微信第三方方式登录
    function isWechatLogin() {
        return isLogin() && getCookie(LOGIN_USER_SOURCE) === "LOGIN_USER_SOURCE_WECHAT" ? true : false;
    }
    // 校验是否通过通过qq方式登录
    function isQQLogin() {
        return isLogin() && getCookie(LOGIN_USER_SOURCE) === "LOGIN_USER_SOURCE_QQ" ? true : false;
    }
    // 校验是否为子账号登录
    function isSubAccount() {
        return isLogin() && getCookie(LoGIN_TYPE) === "SUB_ACCOUNT" ? true : false;
    }
    // 校验是否在微信环境
    function isWeixin() { //排除企业微信环境的干扰
        return /MicroMessenger/i.test(getUA()) && !isWXwork();
    }
    // 校验是否在qq环境
    function isQQ() {
        return /QQ\/([\d\.]+)/i.test(getUA());
    }
    //判断是否在企业微信
    function isWXwork() {
        return /wxwork/i.test(getUA());
    }
    //判断是否在买家版APP环境
    function isBuyerApp() {
        return /WDBuyer/i.test(getUA())
    }
    //判断是否是安卓环境
    function isAndroid(){
        return /android/i.test(getUA())
    }
    //获取客户端版本号
    function getAppVersion() {
        var UA = getUA();
        var appName, appVersion, sdkName, sdkVersion;
        var regApp = /WDAPP\((.*?)\/(.*?)[\s|\)]/i;
        var app = UA.match(regApp);
        if (app && app.length == 3) {
            appName = app[1], appVersion = app[2];
        }
        return appVersion;
    }
    //比较客户端版本
    function versionCompare(a, b) {
        if (a === b) {
            return 0;
        }
        var a_components = a.split(".");
        var b_components = b.split(".");
        var len = Math.min(a_components.length, b_components.length);
        // loop while the components are equal
        for (var i = 0; i < len; i++) {
            // A bigger than B
            if (parseInt(a_components[i]) > parseInt(b_components[i])) {
                return 1;
            }
            // B bigger than A
            if (parseInt(a_components[i]) < parseInt(b_components[i])) {
                return -1;
            }
        }
        // If one's a prefix of the other, the longer one is greater.
        if (a_components.length > b_components.length) {
            return 1;
        }
        if (a_components.length < b_components.length) {
            return -1;
        }
        // Otherwise they are the same.
        return 0;
    }


    // 当前登录用户是否开过店
    function isOpenShop(opts) {
        var opts = opts || {},
            success = opts.success,
            error = opts.error,
            host = getHost(opts.environment),
            CHECK_OPEN_SHOP_URL = host.thorHost + "/wdshop/shop.base.getShopExistInfo/1.0",
            sellerId = getCookie(WD_S_ID);

        if (!sellerId) {
            return error && error(new Error("没获取到当前登录的卖家id"));
        }

        jsonp({
            url: CHECK_OPEN_SHOP_URL,
            data: {
                context: {
                    "shop_id": sellerId
                }
            },
            success: function (data) {
                success && success(data);
            },
            error: function (e) {
                error && error(e);
            }
        });
    }

    // 校验第三方登录用户是否绑定了手机号
    function getBindStatus(opts) {
        /**
         * 返回的结果为result=true，未绑定;result=false，已绑定
         */
        var opts = opts || {},
            success = opts.success,
            error = opts.error,
            host = getHost(opts.environment),
            CHECK_BIND_URL = host.backendHost + '/user/oauth/bind/getdemand';

        jsonp({
            url: CHECK_BIND_URL,
            success: function (data) {

                callback(data, function (result) {
                    success && success(result);
                }, function (e) {
                    error && error(e);
                });
            },
            error: function (e) {
                error && error(e);
            }
        });
    }

    //获取登录用户信息
    function getUserInfo(opts) {
        /**
            ###
            1、校验是否有登录cookie值，因为调取用户信息接口需要cookie参数
            2、校验当前浏览器是否支持CORS方式跨域；若支持则发起ajax请求(废弃，目前统一采用jsonp的方式处理)
            3、若不支持，则采取jsonp的方式，动态创建script标签，利用src属性请求接口执行回调函数(因为要兼容IE7,8)

            ###
            opts:{
            environment:环境值,
            success:function(result){}//执行成功后的回调函数
            error:function(result){}//执行失败后的回到函数
        }
        */
        var host,
            opts = opts || {},
            success = opts.success,
            error = opts.error,
            host = getHost(opts.environment),
            USER_INFO_URL = host.backendHost + "/user/getinfo";

        // 模拟统一的vap接口格式
        var infoResult = vap();

        if (isLogin()) {
            jsonp({
                url: USER_INFO_URL,
                success: function (data) {

                    callback(data, function (result) {

                        success && success(result);

                    }, function (e) {

                        error && error(e);

                    });
                },
                error: function (e) {
                    error && error(e);
                }
            });
        } else {
            infoResult.status.code = CODE_FAILED;
            infoResult.status.message = MSG_LOGIN_ERROR;
            infoResult.result = "";

            error && error(infoResult);
        }
    }

    function qqLogin(options) {
        var options = options || {},
            targetUrl = getTargetUrl(options.url, TYPE_LOGIN),
            host = getHost(options.environment),
            type = options.device;

        // _window.location.href = getCompleteLink(host.backendHost, '/user/oauth/qq/login', {
        //     redirect: targetUrl,
        //     type: isMobile(type) ? 'mobile' : 'pc'
        // });

        return getCompleteLink(host.backendHost, '/user/oauth/qq/login', {
            redirect: targetUrl,
            type: isMobile(type) ? 'mobile' : 'pc'
        });
    }

    function wechatSlientLogin(options) {
        var options = options || {},
            targetUrl = getTargetUrl(options.url, TYPE_LOGIN),
            host = getHost(options.environment);

        // _window.location.href = getCompleteLink(host.backendHost, '/user/oauth/wechat/silentlogin', {
        //     redirect: targetUrl
        // });
        return getCompleteLink(host.backendHost, '/user/oauth/wechat/silentlogin', {
            redirect: targetUrl
        });
    }

    function wechatForceLogin(options) {
        var options = options || {},
            targetUrl = getTargetUrl(options.url, TYPE_LOGIN),
            host = getHost(options.environment);

        // _window.location.href = getCompleteLink(host.backendHost, '/user/oauth/wechat/login', {
        //     redirect: targetUrl
        // });

        return getCompleteLink(host.backendHost, '/user/oauth/wechat/login', {
            redirect: targetUrl
        });
    }

    function login(options) {
        /**
         ## 可选参数配置项
          options:{
          url: 重定向的url，若不传，则默认获取当前访问页面的url
          environment:当前环境值，若不传，则默认解析识别当前页面的url的环境值
          oauth:是否显示第三方登录；oauth=0不显示；不传参，默认显示
          force:配置微信登录采用静默授权或强制授权；force=1为强制授权，不传，默认静默授权
          bind: 配置第三方登录成功后是否跳转到绑定页面。bind=1 ：表示第三方登录成功后，如果账号未绑定手机号则跳转到绑定页面，绑定成功后跳转回目标页。默认为不跳转到绑定页面。
          device:区别h5端或者pc端；h5端：device=1,pc端：device=0
          }
        */
        var options = options || {},
            host = getHost(options.environment),
            targetUrl = encodeURIComponent(getTargetUrl(options.url, TYPE_LOGIN));


        //区分h5端登录和pc端登录
        // _window.location.href = [host.loginPageHost,
        //     isMobile(options.device) ? '/m/login/index.html' : '/m/signin/index.html',
        //     '?redirect=' + targetUrl,
        //     checkParam(options.oauth) ? '&oauth=0' : '',
        //     checkParam(options.force) ? '&force=1' : '',
        //     checkParam(options.bind) ? '&bind=1' : ''
        // ].join('');

        return [
        // host.loginPageHost,
        // isMobile(options.device) ? '/m/login/index.html' : '/m/signin/index.html',
        isMobile(options.device) ? (host.ssoPageHost + '/login/index.php') : (host.loginPageHost + '/m/signin/index.html'),
        '?redirect=' + targetUrl,
        checkParam(options.oauth) ? '&oauth=0' : '',
        checkParam(options.force) ? '&force=1' : '',
        checkParam(options.bind) ? '&bind=1' : '',
        checkParam(options.nochoice) ? '&nochoice=1' : '',
        checkParam(options.seller) ? '&seller=1' : '',
        checkParam(options.sellerswitchshop) ? '&sellerswitchshop=' + options.sellerswitchshop : '',
        ].join('');
    }

    function register(options) {
        var options = options || {},
            targetUrl = getTargetUrl(options.url, TYPE_LOGIN),
            host = getHost(options.environment);

        // _window.location.href = getCompleteLink(host.backendHost, '/user/logout', {
        //     redirect: targetUrl
        // });

        return [
            // host.loginPageHost,
            // isMobile(options.device) ? '/m/login/index.html' : '/m/signin/index.html',
            host.ssoPageHost + '/login/index.php',
            '?redirect=' + targetUrl,
            '&register=1'
            ].join('');
    }

    function logout(options) {
        var options = options || {},
            targetUrl = getTargetUrl(options.url, TYPE_LOGOFF),
            host = getHost(options.environment);

        // _window.location.href = getCompleteLink(host.backendHost, '/user/logout', {
        //     redirect: targetUrl
        // });

        return getCompleteLink(host.backendHost, '/user/logout', {
            redirect: targetUrl
        });
    }

    function bind(options) {
        var options = options || {},
            targetUrl = getTargetUrl(options.url, TYPE_NORMAL),
            host = getHost(options.environment);

        // _window.location.href = getCompleteLink(host.loginPageHost, '/m/login/bind/index.html', {
        //     redirect: targetUrl
        // });

        // return getCompleteLink(host.loginPageHost, '/m/login/bind/index.html', {
        //     redirect: targetUrl
        // });
        return getCompleteLink(host.ssoPageHost, '/login/index.php', {
            redirect: targetUrl,
            bind: 1
        });
    }

    /**
     * 创建店铺
     */
    function addShop(opts){
        var opts = opts || {},
            success = opts.success,
            error = opts.error,
            param = opts.param,
            host = getHost(opts.environment),
            url = host.thorHost + "/wdshop/shop.base.mutiAddShop/1.0",
            sellerId = getCookie(WD_S_ID);

        if (!sellerId) {
            return error && error(new Error("没获取到当前登录的卖家id"));
        }

        var defaultShopInfo = {
            shopName: '我的小店',
            shopLogo: 'https://si.geilicdn.com/img-390300000174535cb4ed0a21924a-unadjust_62_62.png',
        }

        param = param || defaultShopInfo

        jsonp({
            url: url,
            data: {
                param: JSON.stringify(param)
            },
            success: function (data) {
                success && success(data);
            },
            error: function (e) {
                error && error(e);
            }
        });
    }

    var login = {
        isLogin: isLogin,
        isSellerLogin: isSellerLogin,
        isWechatLogin: isWechatLogin,
        isQQLogin: isQQLogin,
        isSubAccount: isSubAccount,
        getUserInfo: getUserInfo,
        qqLogin: qqLogin,
        wechatSlientLogin: wechatSlientLogin,
        wechatForceLogin: wechatForceLogin,
        login: login,
        register: register,
        logout: logout,
        bind: bind,
        getBindStatus: getBindStatus,
        isWeixin: isWeixin,
        isQQ: isQQ,
        isOpenShop: isOpenShop,
        addShop: addShop
    }

    if (typeof module !== "undefined" && module.exports) {
        module.exports = login;
    } else {
        _window.login = login;
    }
})()
