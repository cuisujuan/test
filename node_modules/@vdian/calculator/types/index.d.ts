declare global {
    interface Number {
        /**
         * 乘法
         * @param value number
         * @returns number or NaN. if throw error then return NaN
         */
        mul(value: number): number
        /**
         * 除法
         * @param value number
         * @returns number or NaN. if throw error then return NaN
         */
        div(value: number): number
        /**
         * 减法
         * @param value number
         * @returns number or NaN. if throw error then return NaN
         */
        minus(value: number): number
        /**
         * 加法
         * @param value number
         * @returns number or NaN. if throw error then return NaN
         */
        plus(value: number): number
        /**
         * toFixed
         * @param value number
         * @returns string or NaN. if throw error then return NaN
         */
        toFixed2(value: number): string
    }
    class Big {
        [key: string]: any
        constructor(value: any)
    }
}
export {}
