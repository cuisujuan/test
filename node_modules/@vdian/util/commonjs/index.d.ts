/// <reference types="node" />
export declare function noop(..._args: any): any;
/**
 * 判断是否是未定义
 * @param value 入参cd
 * @returns true/false，undefined、null返回true
 */
export declare function isUndef(value: any): value is undefined | null;
/**
 * 判断是否为空 undefined、null、空字符串返回true
 * @param value 入参
 */
export declare function isEmpty(value: any): value is undefined | null | '';
/**
 * 判断是否为Number类型
 * @param value 入参
 */
export declare function isNumber(value: any): value is number;
/**
 * 判断是否为String类型
 * @param value 入参
 */
export declare function isString(value: any): value is string;
/**
 * 判断是否为Error类型
 * @param value 入参
 */
export declare function isError(value: any): value is Error;
/**
 * 判断是否为Array类型
 * @param value 入参
 */
export declare function isArray(value: any): value is any[];
/**
 * 判断是否为Function类型，async function为true
 * @param value 入参
 */
export declare function isFunction(value: any): value is Function;
/**
 * 判断是否为Date类型
 * @param value 入参
 */
export declare function isDate(value: any): value is Date;
/**
 * 判断是否为Boolean 类型
 * @param value 入参
 */
export declare function isBoolean(value: any): value is boolean;
/**
 * 判断是否为严格Object类型
 * @param value 入参
 */
export declare function isObject(value: any): value is Object;
/**
 * 判断是否为泛object，不包括null
 * @param value 入参
 */
export declare function isWideObject(value: any): boolean;
/**
 * 是否为FormData实例 不支持FormData时返回false
 * @param value - 入参
 */
export declare function isFormData(value: any): value is FormData;
/**
 * 是否为URLSearchParams实例 不支持URLSearchParams时返回false
 * @param value - 入参
 */
export declare function isURLSearchParams(value: any): value is URLSearchParams;
/**
 * 对象是否有某个实例属性
 * @param obj 对象
 * @param key 对象的属性
 */
export declare function hasOwn(obj: object, key: string): boolean;
interface Obj {
    [key: number]: any;
    [key: string]: any;
}
/**
 * 循环对象和数组
 * @param obj 对象或者数组
 * @param fn 回调函数
 */
export declare function forEach(obj: Obj, fn: (value: any, index?: number | string, obj?: Obj) => void): void;
/**
 * 深拷贝
 * @param deep 是否是深度拷贝
 * @param target 目标对象
 * @param sources 多个源对象
 * @returns target 目标对象
 */
export declare function merge(deep: boolean, target: any, ...sources: any[]): any;
/**
 * 浅拷贝
 * @param target 目标对象
 * @param sources 多个源对象
 * @returns target 目标对象
 */
export declare function merge(target: any, ...sources: any[]): any;
/**
 * 防抖函数
 * @param fn 执行函数
 * @param delay 延迟时间
 * @returns 防抖函数
 */
export declare function debounce(fn: (...args: any[]) => any, delay?: number): (...args: any[]) => NodeJS.Timeout;
/**
 * array like to realy array
 * @param value 类数组
 * @returns 数组
 */
export declare function toArray(value: any): any[];
/**
 * 比较两个版本
 * @param a 版本a
 * @param b 版本b
 * @returns 0：a===b，1：a>b，-1：a<b，其余异常情况均为undefined
 */
export declare function compareVersion(a: string, b: string): 0 | 1 | -1 | void;
/**
 * 缓存函数结果
 * @param fn
 * @returns function
 */
export declare function cached<T>(fn: (value: string) => T): (value: string) => T;
/**
 * 驼峰
 * @param str
 * @returns aBC
 * 例如 输入a-b-c 返回aBC
 */
export declare function camelize(str: string): string;
/**
 * 取消驼峰
 * @param str
 * @returns a-b-c
 * 例如 输入aBC 返回a-b-c
 */
export declare function decamelize(str: string): string;
export {};
