"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 空函数
 */
// tslint:disable-next-line
function noop() { }
exports.noop = noop;
/**
 * 判断是否是未定义
 * @param value 入参cd
 * @returns true/false，undefined、null返回true
 */
function isUndef(value) {
    return value === undefined || value === null;
}
exports.isUndef = isUndef;
/**
 * 判断是否为空 undefined、null、空字符串返回true
 * @param value 入参
 */
function isEmpty(value) {
    return value === undefined || value === null || value === '';
}
exports.isEmpty = isEmpty;
function isType(type) {
    return function (value) { return Object.prototype.toString.call(value) === "[object " + type + "]"; };
}
/**
 * 判断是否为Number类型
 * @param value 入参
 */
function isNumber(value) {
    return isType('Number')(value);
}
exports.isNumber = isNumber;
/**
 * 判断是否为String类型
 * @param value 入参
 */
function isString(value) {
    return isType('String')(value);
}
exports.isString = isString;
/**
 * 判断是否为Error类型
 * @param value 入参
 */
function isError(value) {
    return isType('Error')(value);
}
exports.isError = isError;
/**
 * 判断是否为Array类型
 * @param value 入参
 */
function isArray(value) {
    return isType('Array')(value);
}
exports.isArray = isArray;
/**
 * 判断是否为Function类型，async function为true
 * @param value 入参
 */
function isFunction(value) {
    return typeof value === 'function';
}
exports.isFunction = isFunction;
/**
 * 判断是否为Date类型
 * @param value 入参
 */
function isDate(value) {
    return isType('Date')(value);
}
exports.isDate = isDate;
/**
 * 判断是否为Boolean 类型
 * @param value 入参
 */
function isBoolean(value) {
    return isType('Boolean')(value);
}
exports.isBoolean = isBoolean;
/**
 * 判断是否为严格Object类型
 * @param value 入参
 */
function isObject(value) {
    return isType('Object')(value);
}
exports.isObject = isObject;
/**
 * 判断是否为泛object，不包括null
 * @param value 入参
 */
function isWideObject(value) {
    return value !== null && typeof value === 'object';
}
exports.isWideObject = isWideObject;
/**
 * 是否为FormData实例 不支持FormData时返回false
 * @param value - 入参
 */
function isFormData(value) {
    return typeof FormData !== 'undefined' && value instanceof FormData;
}
exports.isFormData = isFormData;
/**
 * 是否为URLSearchParams实例 不支持URLSearchParams时返回false
 * @param value - 入参
 */
function isURLSearchParams(value) {
    return (typeof URLSearchParams !== 'undefined' &&
        value instanceof URLSearchParams);
}
exports.isURLSearchParams = isURLSearchParams;
/**
 * 对象是否有某个实例属性
 * @param obj 对象
 * @param key 对象的属性
 */
function hasOwn(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
exports.hasOwn = hasOwn;
/**
 * 循环对象和数组
 * @param obj 对象或者数组
 * @param fn 回调函数
 */
function forEach(obj, fn) {
    if (isArray(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
            fn.call(null, obj[i], i, obj);
        }
    }
    else if (isObject(obj)) {
        // Iterate over object keys
        for (var key in obj) {
            if (hasOwn(obj, key)) {
                fn.call(null, obj[key], key, obj);
            }
        }
    }
}
exports.forEach = forEach;
/**
 * 合并多个对象
 * @param targetOrDeep 目标对象或者是否深度合并
 * @param sources 多个源对象
 * @returns target 目标对象
 */
function merge(targetOrDeep) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    var deep;
    var target;
    if (isBoolean(targetOrDeep)) {
        deep = targetOrDeep;
        target = sources.shift();
    }
    else {
        target = targetOrDeep;
    }
    forEach(sources, function (source) {
        forEach(source, function (value, key) {
            if (deep && (isArray(value) || isObject(value))) {
                if (isArray(value)) {
                    if (!isArray(target[key])) {
                        target[key] = [];
                    }
                }
                else {
                    if (!isObject(target[key])) {
                        target[key] = {};
                    }
                }
                merge(deep, target[key], value);
            }
            else {
                target[key] = value;
            }
        });
    });
    return target;
}
exports.merge = merge;
/**
 * 防抖函数
 * @param fn 执行函数
 * @param delay 延迟时间
 * @returns 防抖函数
 */
function debounce(fn, delay) {
    if (delay === void 0) { delay = 200; }
    var timer;
    return function () {
        var _this = this;
        var args = arguments;
        clearTimeout(timer);
        timer = setTimeout(function () {
            fn.apply(_this, toArray(args));
        }, delay);
        return timer;
    };
}
exports.debounce = debounce;
/**
 * array like to realy array
 * @param value 类数组
 * @returns 数组
 */
function toArray(value) {
    return Array.prototype.slice.call(value);
}
exports.toArray = toArray;
/**
 * 比较两个版本
 * @param a 版本a
 * @param b 版本b
 * @returns 0：a===b，1：a>b，-1：a<b，其余异常情况均为undefined
 */
function compareVersion(a, b) {
    if (isEmpty(a) || isEmpty(b)) {
        return;
    }
    if (a === b) {
        return 0;
    }
    var sa = a.split('.');
    var sb = b.split('.');
    var min = Math.min(sa.length, sb.length);
    // loop while the components are equal
    for (var i = 0; i < min; i++) {
        var ai = parseInt(sa[i], 10);
        var bi = parseInt(sb[i], 10);
        if (isNaN(ai) || isNaN(bi)) {
            return;
        }
        // A bigger than B
        if (ai > bi) {
            return 1;
        }
        // B bigger than A
        if (ai < bi) {
            return -1;
        }
    }
    // If one's a prefix of the other, the longer one is greater.
    // 1.2.0 > 1.2
    if (sa.length > sb.length) {
        return 1;
    }
    if (sa.length < sb.length) {
        return -1;
    }
}
exports.compareVersion = compareVersion;
/**
 * 缓存函数结果
 * @param fn
 * @returns function
 */
function cached(fn) {
    // create no prototype object
    var cache = Object.create(null);
    return function cachedFn(value) {
        var hit = cache[value];
        return hit || (cache[value] = fn(value));
    };
}
exports.cached = cached;
var camelizeRE = /-(\w)/g;
/**
 * 驼峰
 * @param str
 * @returns aBC
 * 例如 输入a-b-c 返回aBC
 */
function camelize(str) {
    var cache = cached(function (str) {
        return str.replace(camelizeRE, function (_, c) { return (c ? c.toUpperCase() : ''); });
    });
    return cache(str);
}
exports.camelize = camelize;
var decamelizeRE = /([A-Z])/g;
/**
 * 取消驼峰
 * @param str
 * @returns a-b-c
 * 例如 输入aBC 返回a-b-c
 */
function decamelize(str) {
    var cache = cached(function (str) {
        return str.replace(decamelizeRE, '-$1').toLowerCase();
    });
    return cache(str);
}
exports.decamelize = decamelize;
