"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
var constants_1 = require("../constants");
var SEARCH_REGXP = /^[^\?#]*\?([^#]*)/;
function getSearch(url) {
    var matchs;
    return (url && (matchs = url.match(SEARCH_REGXP)) && matchs[1]) || '';
}
// encodeURIComponent将空格转换为%20，浏览器、Java、Php均能转换为空格
// URLSearchParams、URL将空格转换为+，浏览器、Java、Php均能转换为空格
// 此处不遵循RFC-1738规范，依旧将空格转换为%20，为了兼容业务或者其他开源库处理参数时，未将+转换为空格，这种做法兼容性更友好
function encode(value) {
    return encodeURIComponent(value);
}
// 遵循RFC-1738规范，将+转换为空格，%20同时也转换为空格
// 将Java、Php传递的+转换为对应的空格，兼容RFC-1738规范，前提是参数一定是编码过的，未编码的参数不符合参数处理规范。
function decode(value) {
    return decodeURIComponent(value.replace(/\+/g, ' '));
}
/**
 * @ignore
 */
function parse(url) {
    // get search string
    url = getSearch(url);
    // split params
    var parts = url.split(constants_1.PARAM_DELIMIT);
    var params = {};
    parts.forEach(function (param) {
        // if param is empty
        if (!param) {
            return;
        }
        // split param value
        var splits = param.split(constants_1.PARAM_VALUE_DELIMIT);
        var name = splits[0];
        // param is ?a=a=1&b=1
        // set param = '' if querystring is '?param'
        var value = splits.slice(1).join(constants_1.PARAM_VALUE_DELIMIT) || '';
        if (name) {
            name = decode(name);
            value = decode(value);
            if (util.hasOwn(params, name)) {
                if (!util.isArray(params[name])) {
                    params[name] = [params[name]];
                }
                // tslint:disable-next-line
                ;
                params[name].push(value);
            }
            else {
                params[name] = value;
            }
        }
    });
    return params;
}
exports.parse = parse;
/**
 * @ignore
 */
function stringify(params) {
    /* istanbul ignore next */
    if (!util.isObject(params)) {
        return '';
    }
    var search = [];
    util.forEach(params, function (value, name) {
        if (!util.isUndef(value)) {
            if (!util.isArray(value)) {
                value = [value];
            }
            name = encode(name);
            // normalize {name:array} param to name=array[0]&name=array[1]
            value.forEach(function (val) {
                search.push("" + name + constants_1.PARAM_VALUE_DELIMIT + encode(val));
            });
        }
    });
    return search.join(constants_1.PARAM_DELIMIT);
}
exports.stringify = stringify;
