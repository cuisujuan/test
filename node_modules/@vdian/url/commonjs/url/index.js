"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
var querystring_1 = require("../querystring");
var constants_1 = require("../constants");
var QUERY_PROPERTY = 'query';
var NORMAL_PROPERTIES = [
    'hash',
    'host',
    'hostname',
    'pathname',
    'port',
    'protocol'
];
var QUERY_RELATED_PROPERTIES = ['href', 'search'];
var READONLY_PROPERTIES = ['origin'];
var defineProperty = Object.defineProperty;
// validate url property
function validate(name, value) {
    if (name === QUERY_PROPERTY) {
        return util.isObject(value);
    }
    return util.isString(value) || util.isNumber(value);
}
function getSearch(query) {
    // stringify query to search string
    var search = querystring_1.stringify(query);
    // always use query as search string
    return (search ? constants_1.SEARCH_DELIMIT : '') + search;
}
function defineNormalProperties(instance, element) {
    function handler(name) {
        defineProperty(instance, name, {
            get: function () {
                return element[name];
            },
            set: function (value) {
                if (!validate(name, value)) {
                    return;
                }
                element[name] = value;
            },
            enumerable: true
        });
    }
    NORMAL_PROPERTIES.forEach(handler);
}
function defineQueryProperty(instance, element) {
    function handler(name) {
        defineProperty(instance, name, {
            get: function () {
                // set search property then normalize query
                instance.search = getSearch(element[name]);
                return element[name];
            },
            set: function (value) {
                if (!validate(name, value)) {
                    return;
                }
                element[name] = value;
            },
            enumerable: true
        });
    }
    handler(QUERY_PROPERTY);
}
function defineQueryRelatedProperties(instance, element) {
    function handler(name) {
        defineProperty(instance, name, {
            get: function () {
                element.search = getSearch(element[QUERY_PROPERTY]);
                return element[name];
            },
            set: function (value) {
                if (!validate(name, value)) {
                    return;
                }
                element[name] = value;
                // sync query from search
                element[QUERY_PROPERTY] = querystring_1.parse(element.search);
            },
            enumerable: true
        });
    }
    QUERY_RELATED_PROPERTIES.forEach(handler);
}
function defineReadonlyProperties(instance, element) {
    function handler(name) {
        defineProperty(instance, name, {
            get: function () {
                return element[name];
            },
            enumerable: true
        });
    }
    READONLY_PROPERTIES.forEach(handler);
}
/**
 * Url类
 * ```
 * const url = new Url('https://www.weidian.com/')
 * // get url href
 * let href = url.href
 * // set url href
 * url.href = 'https://www.koudai.com/a.html'
 * console.log(url.host) // www.koudai.com
 * ```
 */
var Url = /** @class */ (function () {
    /**
     * Url
     * @param url 链接地址，未传递使用当前页面链接，如果为相对地址，则会以当前页面url作为base url。
     */
    function Url(url) {
        // if url is empty then set default href
        if (util.isEmpty(url)) {
            url = constants_1.GLOBAL.location.href;
        }
        // create element
        var element = (this._element = constants_1.GLOBAL.document.createElement('A'));
        // refresh href
        element.href = url;
        // define normal properties
        defineNormalProperties(this, this._element);
        // define query related properties
        defineQueryRelatedProperties(this, this._element);
        // define query property
        defineQueryProperty(this, this._element);
        // define readonly properties
        defineReadonlyProperties(this, this._element);
        // refresh query
        this.href = element.href;
    }
    /**
     * toString方法，在String(instance)调用。
     * @returns href属性。
     */
    Url.prototype.toString = function () {
        return this.href;
    };
    return Url;
}());
exports.Url = Url;
