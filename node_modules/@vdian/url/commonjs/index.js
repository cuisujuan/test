"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
var querystring_1 = require("./querystring");
var util = require("./util");
var url_1 = require("./url");
exports.Url = url_1.Url;
/**
 * 设置url地址的querystring。
 * @param url 链接地址，如果url为null/undefined，则以当前页面url作为默认值。
 * @param params 参数对象。
 * @param options 设置参数合并规则，具体见参数合并规则。
 * @returns 设置后的url地址。
 */
function setQuerystring(url, params, options) {
    // get window href
    var href = constants_1.GLOBAL.location.href;
    // normalize arguments
    if (util.isObject(url)) {
        options = params;
        params = url;
        url = href;
    }
    // set href if url is undefined/null
    if (util.isUndef(url)) {
        url = href;
    }
    // merge options
    options = util.merge({
        replace: true
    }, options);
    var instance = new url_1.Url(url);
    if (options.replace) {
        // merge params if is replace
        instance.query = util.merge(instance.query || {}, params);
    }
    else {
        var search = querystring_1.stringify(params);
        if (search) {
            var delimit = instance.search.indexOf(constants_1.SEARCH_DELIMIT) === -1
                ? constants_1.SEARCH_DELIMIT
                : constants_1.PARAM_DELIMIT;
            instance.search += delimit + search;
        }
    }
    return instance.toString();
}
exports.setQuerystring = setQuerystring;
/**
 * 获取传入url地址的参数对象。
 * @param url 链接地址 如果url为null/undefined，则以当前页面url作为默认值，如果url为相对地址，不进行url规整化处理。
 * @returns 序列化后的参数对象。
 */
function getQuerystring(url) {
    if (util.isUndef(url)) {
        url = constants_1.GLOBAL.location.href;
    }
    return querystring_1.parse(url);
}
exports.getQuerystring = getQuerystring;
