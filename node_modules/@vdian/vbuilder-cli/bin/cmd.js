#!/usr/bin/env node
/**
 * @file
 * @desc vbuilder client
 * @author liuyuanyangscript@gmail.com
 * @date  2017/08/11
 */
(async () => {
    const fs = require('fs');
    const path = require('path');
    const fse = require('fs-extra');
    const commander = require('commander');
    const detectFileContent = require('detect-file-content');

    process.on('uncaughtException', (reason) => {
        console.error(reason);
        setInstallStatus('rejected');
        process.exit(1);
    });

    process.on('SIGINT', () => {
        setInstallStatus('rejected');
        process.exit(1);
    });

    process.on('unhandledRejection', (reason, p) => {
        console.error('Unhandled Rejection at: Promise ', p, ' reason: ', reason);
        setInstallStatus('rejected');
        process.exit(1);
    });

    function setInstallStatus(status) {
        // console.log('[vbuilder-cli --> vbuilder-cli-core] 更新状态为: ', status);
        fse.ensureFileSync(statusFile);
        fs.writeFileSync(statusFile, status, 'utf8');
    }

    let cache = path.join(process.env.HOME, '.vbuilder');

    const platform = require('@vdian/get-platform')();
    // 适配 zebra
    if (platform == 'zebra-not-docker') {
        const cwd = process.cwd();
        if (cwd.indexOf('.vbuilder') !== -1) {
            cache = `${cwd.split('.vbuilder')[0]}.vbuilder`;
            console.log('cwd 当前路径有 .vbuilder: ', cwd);
            console.log('cache 重置为：', cache);
        } else {
            cache = path.join(cwd, '.vbuilder');
            console.log('cache 重置为：', cache);
        }
        console.log('vbuilder-cli 适配 zebra 的缓存目录: ', cache);
    }

    const cmdCache = path.join(cache, 'vbuilder-cmd-cache');

    const statusFile = path.join(cache, 'vbuilder-cli-core-status');
    
    function getInstallStatus() {
        fse.ensureFileSync(statusFile);
        const content = fs.readFileSync(statusFile, 'utf-8');

        return content || 'blank';
    }

    function run() {
        setInstallStatus('checking');
        // console.log('[vbuilder-cli --> vbuilder-cli-core] 修改 status 状态为 checking');
        require('ensure-module-latest')({
            moduleName: '@vdian/vbuilder-cli-core',
            cwd: cmdCache,
            registry: 'http://npm.idcvdian.com',
            beforeInstall(cwd) {
                if (fs.existsSync(cwd)) {
                    try {
                        fse.removeSync(cwd);
                    } catch (err) {

                    }
                }

                // console.log('[vbuilder-cli --> vbuilder-cli-core] 当前进程开始安装');
                setInstallStatus('pending');
            },
        }).then((modulePath) => {
            // console.log('[vbuilder-cli --> vbuilder-cli-core] 安装 vbuilder-cli-core 结束，开始执行');
            // console.log('[vbuilder-cli --> vbuilder-cli-core] 修改 status 状态为 resolved');
            setInstallStatus('resolved');
            require(modulePath)(commander);
        }).catch(() => {
            // console.log('[vbuilder-cli --> vbuilder-cli-core] 安装 vbuilder-cli-core 失败');
            // console.log('[vbuilder-cli --> vbuilder-cli-core] 修改 status 状态为 rejected');
            setInstallStatus('rejected');
        });
    }

    try {
        // console.log('[vbuilder-cli --> vbuilder-cli-core] 当前安装状态：', getInstallStatus(), statusFile);

        if (getInstallStatus() === 'checking') {
            // console.log('[vbuilder-cli --> vbuilder-cli-core] 其他进程正在检查 vbuilder-cli-core 的更新状态，等待ing');
            const detectResult = await detectFileContent({
                filePath: statusFile,
                maxTimes: 1 * 60, // 1 min
                internalTime: 1000, // 1s
                matchReg: /(pending)|(resolved)|(rejected)/i,
            });

            if (!detectResult.success) {
                setInstallStatus('rejected');
                process.exit('[vbuilder-cli --> vbuilder-cli-core] 等待 vbuilder-cli-core checking 变更到其他状态失败，退出构建');
            }
        }

        if (getInstallStatus() === 'pending') {
            // console.log('[vbuilder-cli --> vbuilder-cli-core] 检测到其他进程正在更新，等待ing');
            const detectResult = await detectFileContent({
                filePath: statusFile,
                maxTimes: 4 * 60, // 4 min
                internalTime: 1000, // 1s
                matchReg: /(resolved)|(rejected)/i,
            });

            // console.log('[vbuilder-cli --> vbuilder-cli-core] 等待其他进程更新结束，当前安装状态是：', detectResult);

            if (!detectResult.success) {
                setInstallStatus('rejected');
                process.exit('[vbuilder-cli --> vbuilder-cli-core] 等待安装失败，退出构建');
            }
        }

        run();
    } catch(err) {
        setInstallStatus('rejected');
        process.exit(JSON.stringify(err));
    }
})();
