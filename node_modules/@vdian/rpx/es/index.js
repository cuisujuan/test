import { replaceRpx, proxy } from './util';
import { cached } from '@vdian/util';
var SKETCH_WIDTH = 750;
function getConversionValue() {
    try {
        return Number(process.env.RPX_CONVERSION_VALUE);
    }
    catch (e) { }
}
var CONVERSION_VALUE = getConversionValue() || 100;
function getUnit() {
    try {
        return process.env.RPX_UNIT;
    }
    catch (e) { }
}
var UNIT = getUnit() || 'rem';
function getClientWidth() {
    var width = SKETCH_WIDTH;
    try {
        width = window.document.documentElement.clientWidth;
    }
    catch (e) { }
    return width;
}
/**
 * rpx 转换成 px
 * @deprecated 使用to方法替代，to返回包含转换后的单位，利于集中控制单位。
 * @param value rpx的值
 * @returns px的值
 */
export function rpxToPx(value) {
    var width = getClientWidth();
    return (value * width) / SKETCH_WIDTH;
}
/**
 * rpx 转换成 rem
 * @deprecated 使用to方法替代，to返回包含转换后的单位，利于集中控制单位。
 * @param value rpx的值
 * @returns rem 的值
 */
export function rpxToRem(value) {
    return value / CONVERSION_VALUE;
}
/**
 * 将rpx转换为通过目标适配单位(目前是rem)计算后的值。
 * @param value rpx的值
 * @returns 转换后的值和单位
 */
export function to(value) {
    return value / CONVERSION_VALUE + UNIT;
}
/**
 * BE CAREFUL
 * @param options 配置参数
 */
var captured = false;
export function capture(options) {
    if (options === void 0) { options = {}; }
    if (captured) {
        return;
    }
    var resolve = options.resolve;
    proxy(cached(function (text) {
        return resolve ? resolve(text) : replaceRpx(text, to);
    }));
    captured = true;
}
