import { Network, NativeNetwork } from './network';
import * as util from './util';
import normalPlugin from './plugins/normal';
import thorPlugin from './plugins/thor';
import hawkPlugin from './plugins/hawk';
import nativeThorPlugin from './plugins/native-thor';
import { isUseNative } from './util';
export { getDynamicThor } from './plugins/thor/dynamic-thor';
var HEADERS = {
    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    // prettier-ignore
    'Accept': 'application/json, */*'
};
/**
 * 创建Network实例，可传入默认请求参数，通过该方法可创建多个实例，例如上传实例、Thor实例等。
 * @param options 请求参数，与request options保持一致。
 * @returns Network实例。
 */
export function create(options) {
    options = util.merge(true, {}, {
        headers: HEADERS,
        cache: false
    }, options);
    var instance = new Network(options);
    instance.use(normalPlugin);
    return instance;
}
var thor = create();
//  注册拦截插件
thor.use(hawkPlugin);
thor.use(thorPlugin);
var nativeThor = new NativeNetwork();
nativeThor.use(nativeThorPlugin);
/**
 * 网络请求。
 * @param url 请求URL。
 * @param options 请求参数，默认为get请求。
 * @returns Promise
 */
export function request(url, options) {
    if (isUseNative(options)) {
        return nativeThor.request(url, options);
    }
    else {
        return thor.request(url, options);
    }
}
/**
 * 注册插件，插件注册后即被立即执行。
 * @param plugin 插件函数，函数作用域为Network实例。
 * @returns Network实例。
 */
export function use(plugin) {
    return thor.use(plugin);
}
