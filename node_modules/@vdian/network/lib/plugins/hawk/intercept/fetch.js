import { isNativeFunction, isResponseOk } from '../../../util';
import { GLOBAL } from '../../../constants';
var FETCH = GLOBAL.fetch;
function handleRequestResponse(options, response, next) {
    try {
        if (isResponseOk(response.status)) {
            return response
                .clone()
                .json()
                .then(function (data) {
                options.beforeSuccess(data, next);
            })
                .catch(function () {
                next();
            });
        }
    }
    catch (e) { }
    next();
}
/**
 * @ignore
 */
export default function interceptFetch(options) {
    if (!isNativeFunction(FETCH)) {
        return;
    }
    GLOBAL.fetch = function () {
        var args = arguments;
        return FETCH.apply(this, args).then(function (response) {
            return new Promise(function (resolve) {
                handleRequestResponse(options, response, function () {
                    resolve(response);
                });
            });
        });
    };
}
