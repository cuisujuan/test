import { parseJSON, isResponseOk, isFunction, isObject } from '../../../util';
import { GLOBAL } from '../../../constants';
var XMLHTTPREQUEST = GLOBAL.XMLHttpRequest;
var XHR_PROTOTYPE = XMLHTTPREQUEST && XMLHTTPREQUEST.prototype;
var ORIGINAL_XHR_SEND = XHR_PROTOTYPE && XHR_PROTOTYPE.send;
function handleRequestResponse(options, xhr, next) {
    // try catch
    try {
        if (xhr.readyState == 4) {
            if (isResponseOk(xhr.status)) {
                var data = isObject(xhr.response)
                    ? xhr.response
                    : parseJSON(xhr.responseText);
                // 返回false表示中断后续代码执行
                return options.beforeSuccess(data, next);
            }
        }
    }
    catch (e) { }
    next();
}
/**
 * @ignore
 */
export default function interceptRequest(options) {
    // Override send method
    // istanbul ignore next
    if (!isFunction(ORIGINAL_XHR_SEND)) {
        return;
    }
    XHR_PROTOTYPE.send = function () {
        var args = arguments;
        var xhr = this;
        var originalOnreadystatechange = xhr.onreadystatechange;
        var originalOnload = xhr.onload;
        var hasIntercepted = false;
        // zepot use onreadystatechange
        if (originalOnreadystatechange) {
            hasIntercepted = true;
            // tslint:disable-next-line: only-arrow-functions
            xhr.onreadystatechange = function () {
                var args = arguments;
                handleRequestResponse(options, xhr, function () {
                    originalOnreadystatechange.apply(xhr, args);
                });
            };
        }
        // other use onload
        if (originalOnload && !hasIntercepted) {
            // tslint:disable-next-line: only-arrow-functions
            xhr.onload = function () {
                var args = arguments;
                handleRequestResponse(options, xhr, function () {
                    originalOnload.apply(xhr, args);
                });
            };
        }
        return ORIGINAL_XHR_SEND.apply(xhr, args);
    };
}
