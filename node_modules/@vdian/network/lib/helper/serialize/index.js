import * as util from '../../util';
var HASH_DELIMIT = '#';
var SEARCH_DELIMIT = '?';
var PARAM_DELIMIT = '&';
function encode(val) {
    return encodeURIComponent(val).replace(/%20/g, '+');
    // replace(/%40/gi, '@').
    // replace(/%3A/gi, ':').
    // replace(/%24/g, '$').
    // replace(/%2C/gi, ',').
    // replace(/%5B/gi, '[').
    // replace(/%5D/gi, ']')
}
/**
 * @ignore
 */
export function serialize(params) {
    if (util.isURLSearchParams(params)) {
        return params.toString();
    }
    var serializedParams = params;
    // only serialize array and object
    if (util.isObject(params) || util.isArray(params)) {
        var parts_1 = [];
        util.forEach(params, function (val, key) {
            if (util.isUndef(val)) {
                return;
            }
            if (util.isArray(val)) {
                /*
                没有明确规范约定数组使用name[]传递，但建议get与post传递参数时均使用name[]作为key，get获取时使用name[]作为key，post获取时使用name
                1. 由于部分后端语言对name=1&name=2会使用2作为value
                2. name[]作为key能够更明确传递为数组
                */
                key = key + '[]';
            }
            else {
                val = [val];
            }
            util.forEach(val, function parseValue(v) {
                if (util.isDate(v)) {
                    v = v.toISOString();
                }
                else if (util.isWideObject(v)) {
                    v = JSON.stringify(v);
                }
                parts_1.push(encode(key) + '=' + encode(v));
            });
        });
        serializedParams = parts_1.join(PARAM_DELIMIT);
    }
    return serializedParams;
}
/**
 * @ignore
 */
export function appendParams(url, params) {
    if (!util.isString(url)) {
        return '';
    }
    var parts = url.split(HASH_DELIMIT);
    // get url without hash
    url = parts[0];
    // serialize params
    var serializedParams = serialize(params);
    if (util.isString(serializedParams) && serializedParams) {
        url +=
            (url.indexOf(SEARCH_DELIMIT) === -1
                ? SEARCH_DELIMIT
                : PARAM_DELIMIT) + serializedParams;
    }
    parts[0] = url;
    return parts.join(HASH_DELIMIT);
}
