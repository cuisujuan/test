var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { createError, isString, merge } from '../../util';
import jsbridge from '../../helper/jsbridge';
import { Url } from '@vdian/url';
import { AbstractNetwork } from '../abstract';
function getRequestUrl(url) {
    return new Url(url).pathname.slice(1) || '';
}
function isLegalRequestUrl(url) {
    if (!isString(url) || !url) {
        return false;
    }
    var pathname = getRequestUrl(url);
    return pathname && pathname.split('/').length === 3;
}
function getRequestData(data) {
    return (data && data.param) || {};
}
/**
 * NativeNetwork类
 * @ignore
 */
var NativeNetwork = /** @class */ (function (_super) {
    __extends(NativeNetwork, _super);
    function NativeNetwork(options) {
        return _super.call(this, options) || this;
    }
    /**
     * 网络请求
     * @param url 请求URL
     * @param opts 请求参数
     * @returns Promise
     */
    NativeNetwork.prototype.request = function (url, opts) {
        var options = merge({
            url: getRequestUrl(url),
            data: getRequestData(opts && opts.data)
        }, this.options);
        if (isLegalRequestUrl(url)) {
            return jsbridge(options);
        }
        return Promise.reject(createError('Url Error Or Url Pathname Illegal', -2 /* REQUEST_URL_ERROR */));
    };
    return NativeNetwork;
}(AbstractNetwork));
export { NativeNetwork };
