"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.use = exports.request = exports.create = void 0;
var network_1 = require("./network");
var util = require("./util");
var normal_1 = require("./plugins/normal");
var thor_1 = require("./plugins/thor");
var hawk_1 = require("./plugins/hawk");
var native_thor_1 = require("./plugins/native-thor");
var util_1 = require("./util");
var dynamic_thor_1 = require("./plugins/thor/dynamic-thor");
Object.defineProperty(exports, "getDynamicThor", { enumerable: true, get: function () { return dynamic_thor_1.getDynamicThor; } });
var HEADERS = {
    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    // prettier-ignore
    'Accept': 'application/json, */*'
};
/**
 * 创建Network实例，可传入默认请求参数，通过该方法可创建多个实例，例如上传实例、Thor实例等。
 * @param options 请求参数，与request options保持一致。
 * @returns Network实例。
 */
function create(options) {
    options = util.merge(true, {}, {
        headers: HEADERS,
        cache: false
    }, options);
    var instance = new network_1.Network(options);
    instance.use(normal_1.default);
    return instance;
}
exports.create = create;
var thor = create();
//  注册拦截插件
thor.use(hawk_1.default);
thor.use(thor_1.default);
var nativeThor = new network_1.NativeNetwork();
nativeThor.use(native_thor_1.default);
/**
 * 网络请求。
 * @param url 请求URL。
 * @param options 请求参数，默认为get请求。
 * @returns Promise
 */
function request(url, options) {
    if (util_1.isUseNative(options)) {
        return nativeThor.request(url, options);
    }
    else {
        return thor.request(url, options);
    }
}
exports.request = request;
/**
 * 注册插件，插件注册后即被立即执行。
 * @param plugin 插件函数，函数作用域为Network实例。
 * @returns Network实例。
 */
function use(plugin) {
    return thor.use(plugin);
}
exports.use = use;
