"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = void 0;
var abstract_1 = require("../abstract");
var xhr_1 = require("../../helper/xhr");
var util_1 = require("../../util");
var util = require("../../util");
var HOOK_NAMES = [
    'configured',
    'beforeRequest',
    'beforeSuccess',
    'beforeError'
];
function invokeHooks(options, context) {
    util.forEach(HOOK_NAMES, function (name) {
        options[name] = function (data, next) {
            context.hooks.invokeWaterfall(name, data, next);
        };
    });
}
/**
 * Network类
 */
var Network = /** @class */ (function (_super) {
    __extends(Network, _super);
    function Network(options) {
        return _super.call(this, options) || this;
    }
    /**
     * 网络请求
     * @param url 请求URL
     * @param opts 请求参数
     * @returns Promise
     */
    Network.prototype.request = function (url, opts) {
        var _this = this;
        // merge current options to default options
        var options = util.merge(true, {}, this.options, opts || {}, { url: url, extra: {} });
        return new Promise(function (resolve, reject) {
            if (util.isString(options.url) && options.url) {
                invokeHooks(options, _this);
                options.success = resolve;
                options.error = reject;
                xhr_1.default(options);
            }
            else {
                reject({
                    error: util_1.createError('Url Error', -2 /* REQUEST_URL_ERROR */)
                });
            }
        });
    };
    return Network;
}(abstract_1.AbstractNetwork));
exports.Network = Network;
