"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeNetwork = void 0;
var util_1 = require("../../util");
var jsbridge_1 = require("../../helper/jsbridge");
var url_1 = require("@vdian/url");
var abstract_1 = require("../abstract");
function getRequestUrl(url) {
    return new url_1.Url(url).pathname.slice(1) || '';
}
function isLegalRequestUrl(url) {
    if (!util_1.isString(url) || !url) {
        return false;
    }
    var pathname = getRequestUrl(url);
    return pathname && pathname.split('/').length === 3;
}
function getRequestData(data) {
    return (data && data.param) || {};
}
/**
 * NativeNetwork类
 * @ignore
 */
var NativeNetwork = /** @class */ (function (_super) {
    __extends(NativeNetwork, _super);
    function NativeNetwork(options) {
        return _super.call(this, options) || this;
    }
    /**
     * 网络请求
     * @param url 请求URL
     * @param opts 请求参数
     * @returns Promise
     */
    NativeNetwork.prototype.request = function (url, opts) {
        var options = util_1.merge({
            url: getRequestUrl(url),
            data: getRequestData(opts && opts.data)
        }, this.options);
        if (isLegalRequestUrl(url)) {
            return jsbridge_1.default(options);
        }
        return Promise.reject(util_1.createError('Url Error Or Url Pathname Illegal', -2 /* REQUEST_URL_ERROR */));
    };
    return NativeNetwork;
}(abstract_1.AbstractNetwork));
exports.NativeNetwork = NativeNetwork;
