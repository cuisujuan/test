"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../../../util");
var url_1 = require("@vdian/url");
var constants_1 = require("../../../constants");
var ELEMENT = constants_1.GLOBAL.Element;
var ELEMENT_PROTOTYPE = ELEMENT && ELEMENT.prototype;
var SCRIPT_TAGNAME = 'SCRIPT';
var JSONP_CALLBACK_NAME = 'callback';
var PROXY_ELEMENT_METHODS = ['appendChild', 'insertBefore'];
function handleRequestResponse(options, response, next) {
    // try catch
    try {
        return options.beforeSuccess(response, next);
    }
    catch (e) { }
    next();
}
// 获取回调的命名空间、函数定义、函数名称
function getCallbackDefinition(path) {
    var segments = path.split('.');
    var length = segments.length;
    if (!length) {
        return;
    }
    var namespace = constants_1.GLOBAL;
    var definition = constants_1.GLOBAL;
    var name;
    try {
        for (var i = 0; i < length; i++) {
            if (!definition) {
                return;
            }
            name = segments[i];
            namespace = definition;
            definition = namespace[name];
        }
        if (!util_1.isFunction(definition)) {
            return;
        }
    }
    catch (e) {
        return;
    }
    return {
        namespace: namespace,
        name: name,
        definition: definition
    };
}
/**
 * @ignore
 */
function interceptJsonp(options) {
    util_1.forEach(PROXY_ELEMENT_METHODS, function (methodName) {
        var originalMethod = ELEMENT_PROTOTYPE && ELEMENT_PROTOTYPE[methodName];
        if (originalMethod) {
            ELEMENT_PROTOTYPE[methodName] = function (element) {
                // 如果是外联的script标签
                if (element &&
                    element.tagName === SCRIPT_TAGNAME &&
                    element.src) {
                    // 如果src上存在callback参数
                    var callbackName = url_1.getQuerystring(element.src)[JSONP_CALLBACK_NAME];
                    if (util_1.isString(callbackName)) {
                        // 如果全局存在callback函数
                        var def_1 = getCallbackDefinition(callbackName);
                        if (def_1) {
                            var originalCallback_1 = def_1.definition;
                            // tslint:disable-next-line: only-arrow-functions
                            def_1.namespace[def_1.name] = function (response) {
                                var args = arguments;
                                // zepto、jQuery在script load事件中判断responseData是否为存在，如果存在则执行success，不存在则执行error
                                // 所以jsonp请求均会执行一次成功或者失败，此处让业务执行错误回调
                                handleRequestResponse(options, response, function () {
                                    originalCallback_1.apply(def_1.namespace, args);
                                });
                            };
                        }
                    }
                }
                return originalMethod.apply(this, util_1.toArray(arguments));
            };
        }
    });
}
exports.default = interceptJsonp;
