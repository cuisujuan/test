"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDynamicThor = void 0;
var url_1 = require("@vdian/url");
var util_1 = require("../../util");
var constants_1 = require("../../constants");
// 判断当前页面是否是多域名页面
function isMultiDomain(baseDomain) {
    return constants_1.WHITE_MULTI_DOMAINS.indexOf(baseDomain) > -1;
}
/**
 * 将入参 url 中的 base domain 转为多域名列表中的 base domain
 * @param url thor 接口的 url 链接
 * @return 转换后的 thor 接口 url，其 base domain 在多域名列表中。
 */
function getDynamicThor(url) {
    var apiUrl = new url_1.Url(url);
    // api 接口的 hostname
    var apiHostname = apiUrl.hostname;
    // 当前页面 base domain
    var pageBaseDomain = util_1.getBaseDomain(location.hostname);
    // 非 thor 接口或者当前页面的 base domain 不在多域名列表中，则不替换，直接返回原 url
    if (!util_1.isThor(apiHostname) || !isMultiDomain(pageBaseDomain)) {
        return url;
    }
    var baseDomainRegExp = new RegExp(util_1.getBaseDomain(apiHostname) + '$');
    // 将接口中的 base domain替换为当前页面的 base domain
    apiUrl.hostname = apiHostname.replace(baseDomainRegExp, pageBaseDomain);
    return apiUrl.href;
}
exports.getDynamicThor = getDynamicThor;
