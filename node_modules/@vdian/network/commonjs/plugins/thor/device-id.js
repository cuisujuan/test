"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeviceId = void 0;
var util_1 = require("../../util");
var constants_1 = require("../../constants");
var DEVICE_ID = {};
var COMPLETED = false;
var INITIALIZED = false;
var DEVICE_ID_CALLBACK_QUEUE = [];
function push(callback) {
    DEVICE_ID_CALLBACK_QUEUE.push(callback);
}
function flush(value) {
    // run callback
    util_1.forEach(DEVICE_ID_CALLBACK_QUEUE, function (callback) {
        callback(value);
    });
    // clear queue
    DEVICE_ID_CALLBACK_QUEUE.length = 0;
}
function getSuid(callback) {
    if (!util_1.isUndef(constants_1.GLOBAL.KDJSBridge2)) {
        constants_1.GLOBAL.KDJSBridge2.call('WDJSBridge', 'getSuid', {}, function (res) {
            if (res && res.param && res.param.suid) {
                callback(res.param.suid);
            }
            else {
                callback();
            }
        });
    }
    else {
        callback();
    }
}
function getCuid(callback) {
    if (!util_1.isUndef(constants_1.GLOBAL.KDJSBridge2)) {
        constants_1.GLOBAL.KDJSBridge2.call('WDJSBridge', 'getCuid', {}, function (res) {
            if (res && res.param && res.param.cuid) {
                callback(res.param.cuid);
            }
            else {
                callback();
            }
        });
    }
    else {
        callback();
    }
}
function init() {
    if (INITIALIZED) {
        return;
    }
    INITIALIZED = true;
    var count = 0;
    function cb() {
        count++;
        if (count === 2) {
            COMPLETED = true;
            // flush queue , then next get callback call with cache device id
            flush(DEVICE_ID);
        }
    }
    getSuid(function (suid) {
        suid && (DEVICE_ID.suid = suid);
        cb();
    });
    getCuid(function (cuid) {
        cuid && (DEVICE_ID.cuid = cuid);
        cb();
    });
}
/**
 * @ignore
 */
function getDeviceId(callback) {
    init();
    if (COMPLETED) {
        callback(DEVICE_ID);
    }
    else {
        // push into queue if deviceId has not been got
        push(callback);
    }
}
exports.getDeviceId = getDeviceId;
