"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cookie_1 = require("@vdian/cookie");
var util_1 = require("../../util");
var device_id_1 = require("./device-id");
var dynamic_thor_1 = require("./dynamic-thor");
var CSRF_TOKEN_NAME = 'wdtoken';
/**
 * 通过直接打开接口的csrf攻击，如果攻击者将某个接口拼接发给用户，用户直接打开则会导致新增或者删除数据
 * 全网下发统一的session cookie token，前端获取后通过在接口中追加token参数，在server端对比接口传递的token与cookie中的token
 */
function appendCSRFTokenParam(params) {
    // get wdtoken
    var token = cookie_1.get(CSRF_TOKEN_NAME);
    if (token) {
        // append wdtoken param to url
        if (util_1.isObject(params)) {
            params[CSRF_TOKEN_NAME] = token;
            return;
        }
        if (util_1.isFormData(params)) {
            params.append(CSRF_TOKEN_NAME, token);
            return;
        }
        if (util_1.isURLSearchParams(params)) {
            params.set(CSRF_TOKEN_NAME, token);
            return;
        }
    }
}
// append suid and cuid to context
function appendDeviceId(params, callback) {
    device_id_1.getDeviceId(function (deviceId) {
        // only for object params
        if (util_1.isObject(params)) {
            params.context = util_1.merge(params.context || {}, deviceId);
        }
        callback();
    });
}
// TODO: sieve server error or network error
function enhanceErrorResponse(error) {
    var code = error.code, subcode = error.subcode, message = error.message;
    return {
        status: {
            code: !util_1.isUndef(code) ? code : -1 /* XHR_ERROR */,
            subcode: subcode,
            message: message
        },
        result: null
    };
}
function handleResponse(data) {
    // if status.code === 0,resolve response
    if (data && data.status && data.status.code === 0) {
        return data;
    }
    return Promise.reject(data);
}
function handleErrorResponse(error) {
    return Promise.reject(enhanceErrorResponse(error));
}
/**
 * @ignore
 */
function thor() {
    var context = this;
    context.hooks.unshift('configured', function (_a, next) {
        var options = _a.options;
        /**
         * 多域名替换
         * fix bug: https://maxket.com/ios14-tracking-and-analytics/
         */
        options.url = dynamic_thor_1.getDynamicThor(options.url);
        // thor froce json response type
        options.responseType = 'json';
        options.data = options.data || {};
        appendCSRFTokenParam(options.data);
        if (options.extra.deviceId) {
            appendDeviceId(options.data, function () {
                next();
            });
        }
        else {
            next();
        }
    });
    var request = context.request;
    // tslint:disable-next-line
    context.request = function () {
        return request
            .apply(context, arguments)
            .then(handleResponse, handleErrorResponse);
    };
}
exports.default = thor;
