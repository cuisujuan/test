"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBaseDomain = exports.isThor = exports.goto = exports.isUseNative = exports.isNativeFunction = exports.parseJSON = exports.isResponseOk = void 0;
var constants_1 = require("../constants");
var user_agent_1 = require("@vdian/user-agent");
__exportStar(require("@vdian/util"), exports);
__exportStar(require("./error"), exports);
/**
 * @ignore
 */
function isResponseOk(status) {
    return (status >= 200 && status < 300) || status == 304;
}
exports.isResponseOk = isResponseOk;
/**
 * @ignore
 */
function parseJSON(value) {
    try {
        return JSON.parse(value);
    }
    catch (e) { }
}
exports.parseJSON = parseJSON;
/**
 * @ignore
 */
function isNativeFunction(value) {
    return (typeof value === 'function' &&
        value.toString().indexOf('[native code]') !== -1);
}
exports.isNativeFunction = isNativeFunction;
/**
 * @ignore
 */
function isUseNative(options) {
    var _a;
    return user_agent_1.isWDBuyer() && ((_a = options === null || options === void 0 ? void 0 : options.extra) === null || _a === void 0 ? void 0 : _a.useNative);
}
exports.isUseNative = isUseNative;
/**
 * @ignore
 */
function goto(url) {
    url && constants_1.GLOBAL.location.assign(url);
}
exports.goto = goto;
/**
 * @ignore
 */
function isThor(hostname) {
    var thorRegExp = /^thor\./gi;
    return thorRegExp.test(hostname);
}
exports.isThor = isThor;
/**
 * @ignore
 *
 * get base domain from hostname
 * base domain aka eTLD+1
 */
function getBaseDomain(hostname) {
    var fragments = hostname.split('.');
    var length = fragments.length;
    return (fragments[length - 2] + "." + fragments[length - 1]).toLowerCase();
}
exports.getBaseDomain = getBaseDomain;
