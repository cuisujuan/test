"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
function formatNumberParts(numberParts) {
    return numberParts.map(function (i) { return Number(i); });
}
// 通过需要匹配的字符串，创建正则表达式，对元字符进行转义
function regexEscape(regText) {
    return regText.replace(constants_1.REGEX_SPECIAL_CHARACTER, '\\$&');
}
// 把年份最后两位变成0
var get2Year = function (date) {
    return Number((date.getFullYear() + '').replace(/\d{2}$/, '00'));
};
// 一位数字变成两位数字左补0
var get2 = function (value) { return (value < 10 ? '0' + value : value + ''); };
// 获取相对应的日期相关数据
var getValueByPattern = function (fmt, date) {
    var patterns = {
        yy: (date.getFullYear() + '').slice(-2),
        yyyy: date.getFullYear(),
        M: date.getMonth() + 1,
        MM: get2(date.getMonth() + 1),
        d: date.getDate(),
        dd: get2(date.getDate()),
        H: date.getHours(),
        HH: get2(date.getHours()),
        m: date.getMinutes(),
        mm: get2(date.getMinutes()),
        s: date.getSeconds(),
        ss: get2(date.getSeconds()),
        E: date.getDay()
    };
    return patterns[fmt];
};
// 解析时间中间数据
var getParseInfo = function (input, format) {
    var regexpText = regexEscape(format);
    var index = 0;
    var result = {
        tokenMap: {},
        numberParts: [],
        errorFlag: false
    };
    // 记录格式化符号在捕获组中的索引
    regexpText = regexpText.replace(constants_1.PARSE_TOKEN, function (token) {
        result.tokenMap[token] = index++;
        return constants_1.TOKEN_REGEX_MAP[token];
    });
    regexpText = "^" + regexpText + "$";
    // 获取捕获组 存入numberParts
    var match = input.match(new RegExp(regexpText)) || [];
    if (match.length === 0) {
        result.errorFlag = true;
    }
    else {
        match.shift();
        result.numberParts = match.slice();
    }
    return result;
};
/**
 * DateHelper 类
 */
var DateHelper = /** @class */ (function () {
    function DateHelper() {
    }
    /**
     * 格式化时间
     * @remarks
     * 格式化符号有下列几种
     * yyyy : 四位数的年份。例如：2018
     * yy   : 两位数的年份。例如：18
     * MM   : 两位数月份，从 01 开始。01-12
     * M    : 一位数月份，从 1 开始。1-12
     * dd   : 两位天数。01-31
     * d    : 一位天数。1-31
     * HH   : 两位小时，24小时制。00-23
     * H    : 一位小时，24小时制。0-23
     * mm   : 两位分钟。00-59
     * m    : 一位分钟。0-59
     * ss   : 两位秒。00-59
     * s    : 一位秒。0-59
     * E    ：星期数。0-6，星期天是 0
     * @param date - 日期对象
     * @param format
     * @returns 格式化的时间字符串
     */
    DateHelper.prototype.format = function (date, format) {
        if (!(date instanceof Date)) {
            return '';
        }
        format = format || constants_1.DEFAULT_FORMAT;
        format = format.replace(constants_1.FORMAT_TOKEN, function (part) { return getValueByPattern(part, date) + ''; });
        return format;
    };
    /**
     * 解析时间
     * @remarks
     * 格式化符号有下列几种
     * yyyy : 四位数的年份。例如：2018
     * yy   : 两位数的年份。例如：18
     * MM   : 两位数月份，从 01 开始。01-12
     * M    : 一位数月份，从 1 开始。1-12
     * dd   : 两位天数。01-31
     * d    : 一位天数。1-31
     * HH   : 两位小时，24小时制。00-23
     * H    : 一位小时，24小时制。0-23
     * mm   : 两位分钟。00-59
     * m    : 一位分钟。0-59
     * ss   : 两位秒。00-59
     * s    : 一位秒。0-59
     * @param input - 格式化的时间字符串
     * @param format
     * @returns 日期对象
     */
    DateHelper.prototype.parse = function (input, format) {
        if (!input || !format) {
            return new Date(NaN);
        }
        if (typeof input !== 'string' || typeof format !== 'string') {
            return new Date(NaN);
        }
        var parseInfo = getParseInfo(input, format);
        if (parseInfo.errorFlag) {
            return new Date(NaN);
        }
        // 例如 ['2018','12','25']
        var matchParts = parseInfo.numberParts;
        // 例如{yyyy:0,MM:1,dd:2} yyyy对应的年在matchParts中的索引是0
        var fmt = parseInfo.tokenMap;
        // 变成数字数组 用于 new Date 方法
        var parts = formatNumberParts(matchParts);
        var year = parts[fmt.yyyy] || parts[fmt.yy] || constants_1.DEFAULT_YEAR;
        if (matchParts[fmt.yy]) {
            year += get2Year(new Date());
        }
        var month = (parts[fmt.MM] || parts[fmt.M] || constants_1.DEFAULT_MONTH) - 1;
        var date = parts[fmt.dd] || parts[fmt.d] || constants_1.DEFAULT_DATE;
        var hour = parts[fmt.HH] || parts[fmt.H] || constants_1.DEFAULT_HOUR;
        var minute = parts[fmt.mm] || parts[fmt.m] || constants_1.DEFAULT_MINUTE;
        var second = parts[fmt.ss] || parts[fmt.s] || constants_1.DEFAULT_SECOND;
        return new Date(year, month, date, hour, minute, second);
    };
    return DateHelper;
}());
exports.default = DateHelper;
